def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    //throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def packageTime() {
    return new Date().format("yyyyMMddHHmm")
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    signingConfigs {
        debug {
            storeFile file("baturu-crm-app.keystore")
            storePassword "123456"
            keyAlias "baturucrm"
            keyPassword "123456"
        }
        release {
            storeFile file("baturu-crm-app.keystore")
            storePassword "123456"
            keyAlias "baturucrm"
            keyPassword "123456"
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.qipeipu.crm.newapp"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        manifestPlaceholders = [
          MTA_APPKEY:"AF5XQR6A8H4E",
          MTA_CHANNEL:""
        ]

    }

    packagingOptions {
        pickFirst 'lib/arm64-v8a/libne_audio.so'
        pickFirst 'lib/x86/libne_audio.so'
        pickFirst 'lib/x86_64/libne_audio.so'
        pickFirst 'lib/armeabi-v7a/libne_audio.so'
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            resValue "string", "app_name", "汽配铺CRM"
            manifestPlaceholders = ["pgy_appid": ""]
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.release
            resValue "string", "app_name", "CRM 测试版"
            manifestPlaceholders = ["pgy_appid": "44d7e6642f93393345a6ea721dadd75e"]
        }
    }
//    android.applicationVariants.all { variant ->
//        variant.outputs.all {
//            outputFileName = "crm-v${variant.versionName}-c${variant.versionCode}-${variant.buildType.name}-${packageTime()}.apk".toLowerCase()
//        }
//    }

//    splits {
//         //基于ABI配置多个APK。
//        abi { //允许每个ABI构建多个APK。
//            enable true //默认情况下包含所有ABI，因此使用reset（）和include指定我们只需要//为armeabi-v7a和arm64-v8a设置APK。//将Gradle应为其创建的ABI列表重置为无。
//            reset()//指定Gradle应为其创建APK的ABI列表。// include“armeabi-v7a”，“arm64-v8a” //指定我们不想生成包含所有ABI的通用APK。
//            universalApk false
//        }
//    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
